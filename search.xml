<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Yoda Conditions</title>
      <link href="/2022/11/19/yoda-condition/"/>
      <url>/2022/11/19/yoda-condition/</url>
      
        <content type="html"><![CDATA[<blockquote><p>When you look at the dark side, careful you must be.<br>For the dark side looks back.</p></blockquote><p>在编程中我们常常不得不面对 typo 所带来的隐形程序漏洞，尤其是在条件判断表达式中。例如将等于 (==) 或不等于 (!=) 错打成赋值 (=)，使得判断结果始终为真 (True)，导致程序出现非期待的行为。使用 yoda conditions 能够避免上述错误的出现。</p><p>Yoda conditions 是一种编程风格，将条件判断表达式中的操作符两边的部分位置互换，与常见的编写顺序相反，其中变量位于操作符右边，常量、字面值或函数位于操作符左边。通过调换这两部分的位置，编译器就能够在出现上述的 typo 错误时检查出来，从而避免了程序漏洞的产生。Yoda conditions 得名于电影星战中的尤达大师 <a href="https://www.starwars.com/databank/yoda">(Master Yoda)</a>。Yoda 说话时使用一种宾主动 (object-subject-verb) 倒装的语言模式<sup>[<a href="#pullum">1</a>]</sup>，与颠倒条件判断式的编程风格如出一辙 (笔者觉得中文翻译为“<em>山东话条件式</em> ”则颇为贴切😝)。</p><p>下面这个例子说明了 yoda conditions 与正常条件表达式的不同：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// normal conditions</span></span><br><span class="line"><span class="keyword">if</span> (myAnswer == <span class="number">42</span>) &#123; <span class="comment">/* do something */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// yoda conditions</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">42</span> == myAnswer) &#123; <span class="comment">/* do something */</span> &#125;</span><br></pre></td></tr></table></figure><p>那么我们什么时候应该使用 yoda contions 呢？读者可以参考 <em>Yoda Conditions: To Yoda or Not to Yoda</em> 这篇文章<sup>[<a href="#mork">2</a>]</sup>。总得来说，分为以下几种情况：</p><ol><li>在判等的条件中使用，在比较大小 (typo 不会导致赋值) 的条件中不必使用</li><li>在变量与常量、字面值和函数的判等条件中使用</li><li>在比较变量与变量的条件中不必使用</li><li>在比较函数与常量、字面值的条件中不必使用</li></ol><p>虽然 yoda conditions 能够有效避免 typo 错误的产生，但是有不少针对于 yoda conditions 的批评声<sup>[<a href="#classic">3</a>,<a href="#paris">4</a>]</sup>，认为其损害了程序的可读性，给阅读者带来了心智负担。不使用 yoda conditions，而是仔细编写能够覆盖每条代码路径的单元测试样例也能够使得 typo 错误被发现。读者可能发现了上述条件 3 中无法使用 yoda conditions 发现错误，也需要依赖于单元测试。因此笔者也认为程序的可读性要优先于这些 tricky 的技巧，毕竟软件工程中的代码维护者不只有编写者一个人。</p><p>软件工程中没有银弹，但是单元测试也许能算。</p><h3 id="参考文献">参考文献</h3><p><span id='pullum'>1. Geoffrey K. Pullum. 2005. “YODA’S SYNTAX THE TRIBUNE ANALYZES”. <a href="http://itre.cis.upenn.edu/~myl/languagelog/archives/002173.html">http://itre.cis.upenn.edu/~myl/languagelog/archives/002173.html</a></span><br><span id='mork'>2. Tonya Mork. 2016. “Yoda Conditions: To Yoda or Not to Yoda”. <a href="https://knowthecode.io/yoda-conditions-yoda-not-yoda">https://knowthecode.io/yoda-conditions-yoda-not-yoda</a> </span><br><span id='classic'>3. Mike Classic. 2017. “Yoda Conditions: Why You Shouldn’t Use Them”. <a href="https://mikeclassic.ca/blog/yoda-conditions-why-you-shouldnt-use-them">https://mikeclassic.ca/blog/yoda-conditions-why-you-shouldnt-use-them</a> </span><br><span id='paris'>4. Grégoire Paris. 2020. “Why using Yoda conditions you should probably not be”. <a href="https://dev.to/greg0ire/why-using-yoda-conditions-you-should-probably-not">https://dev.to/greg0ire/why-using-yoda-conditions-you-should-probably-not</a> </span></p><h3 id="License">License</h3><p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="Creative Commons License Logo"></a><br>This article is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a>.<br>Please contact me for commercial use.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM编程模型</title>
      <link href="/2022/07/31/nvm-programming-model/"/>
      <url>/2022/07/31/nvm-programming-model/</url>
      
        <content type="html"><![CDATA[<p>最近 Intel 宣布将终止 Optane Memory 的业务 (<em><a href="https://www.tomshardware.com/news/intel-kills-optane-memory-business-for-good">Intel Kills Optane Memory Business Entirely</a></em>)，预计将会给学术界的相关研究热潮泼上一盆冰水。最近几年由于 Intel Optane DC Persistent Memory (PMem 或 NVDIMM) 的发布，学术界也掀起了一股针对 PMem 的研究热潮。笔者在研究生期间也曾参与 PMem 的研究，并借此水了一篇论文。本文总结一下 NVM 的编程模型，纪念一下这个行将成为历史的“emerging technology”🙃。</p><p>Intel PMem 连接到内存总线上和 DRAM 共享 iMC (integrated Memory Controller)，并提供了三种模式：Memory Mode、AppDirect Mode 和 Mixed Mode，如下图所示。在 Memory Mode 下，PMem 用作主存，而 DRAM 充当直接映射缓存。在 AppDirect Mode 下，DRAM 仍然作为主存，而 PMem 则提供持久性数据存储，通过文件系统进行管理和访问。在 Mixed Mode 下，一部分 PMem 被配置为 AppDirect Mode 访问模式，剩下部分则作为主存，此时 DRAM 也被用作直接映射缓存，对于应用程序和操作系统都不可见。<br><img src='optane_modes.png' width='100%' style='margin:auto;display:block;'/></p><p>SNIA (Storage Networking Industry Association) 定义了 NVM 作为持久性存储器时的编程模型<sup>[<a href="#snia">1</a>]</sup> 如下图所示。其使用标准文件语义提供命名、权限管理和内存映射等功能。NVDIMM Driver 提供了用于管理NVM的配置和运行状况的访问接口，还提供了标准块存储设备接口以便于面向传统存储设备设计的应用程序仍然可以使用文件接口 (File API) 访问/或直接进行裸设备访问 (Raw Device Access)。图中右侧部分是 NVM 编程模型的重点所在，其中 PM-Aware 文件系统也使用文件语义进行 NVM 访问。但于传统文件系统不同的是，PM-Aware 文件系统 (如 ext4, xfs) 提供了直接访问文件数据的 DAX (direct access) 特性，在使用内存映射接口 (如 Linux 中的 <code>mmap</code>) 时绕过内核中的页面缓存 (page cache)，直接访问位于 NVM 中的数据本身，因而可以在无需内核介入的情况下就地修改数据而无需进行数据拷贝。此外，Linux 内核还提供了设备直接访问 (device DAX)<sup>[<a href="#williams">2</a>]</sup> 特性，可以在不使用文件系统的情况下访问 NVM 中的数据，因而也不支持命名和权限管理的功能。<br><img src='nvmp.png' width='100%' style='margin:auto;display:block;'/></p><p>Intel、AMD 等芯片供应商为实现 NVM 中数据持久化提供了持久域 (persistence domain或power-fail protected domain)<sup>[<a href="#scargal">3</a>]</sup> 的概念，位于其持久域中的数据在断电时使用平台所保证提供的电能将数据刷新到 NVM，因此进入持久域与否意味着数据是否会在发生电源故障时丢失。Intel 的硬件平台提供了 ADR (asynchronous DRAM refresh) 的特性用于实现持久域，以及 eADR (enhanced asynchronous DRAM refresh) 如下图所示。ADR 仅包括内存控制器中的写等待队列 (write pending queue) 和 NVM，且只在断电时刷新位于持久域中的数据，并不会主动刷新 CPU 中的缓存数据。eADR 则可以主动刷新 CPU 缓存而无需应用程序执行刷新操作，但是需要调用不可屏蔽中断 (non-maskable interrupt, NMI) 来进行缓存刷新。<br><img src='adr.png' width='60%' style='margin:auto;display:block;'/></p><p>虽然 eADR 可以主动刷新缓存数据，但是应用程序仍然需要执行内存栅栏操作以保证写入顺序的正确性。为了支持缓存中的数据能够被按序刷新到持久域中，Intel 提供了一组缓存行刷新和存储屏障 (store barrier) 指令，这些指令详细信息的如下表所示。<br><img src='memfence.png' width='100%' style='margin:auto;display:block;'/></p><p>为了保证数据写入时的故障原子性 (failure atomicity) 以确保系统在断电或崩溃后能够恢复到一个一致性的状态，我们可以使用上述的缓存行刷新和内存栅栏指令，确保数据在断电前被刷新到持久域中。此外，上层的应用程序可以结合日志和写时复制等技术，在写入大量数据到 NVM 中时保证故障原子性，使得在系统崩溃后能够恢复到一个一致性状态。为了减轻在应用程序中手动添加缓存行刷新、内存栅栏和写入日志等这类低级别操作所带来的编程负担，Intel提供了持久性内存开发工具包 (Persistent Memory Development Kit, PMDK<sup>[<a href="#intel">4</a>]</sup>) 来为开发人员提供高层次的编程接口，方便程序员进行 NVM 编程。</p><h3 id="参考文献">参考文献</h3><p><span id='snia'>1. SNIA. “Persistent Memory Programming Model”. 2020. <a href="https://www.snia.org/educational-library/persistent-memory-programming-model-2020">https://www.snia.org/educational-library/persistent-memory-programming-model-2020</a></span><br><span id='williams'>2. Dan Williams. “‘Device DAX’ for persistent memory”. 2016. <a href="https://lwn.net/Articles/686664">https://lwn.net/Articles/686664</a></span><br><span id='scargal'>3. Steve Scargall. “Programming Persistent Memory: A Comprehensive Guide for Developers”. 2020. <a href="https://pmem.io/books">https://pmem.io/books</a></span><br><span id='intel'>4. Intel. “Persistent Memory Development Kit (PMDK)”. 2021. <a href="https://pmem.io/pmdk">https://pmem.io/pmdk</a></span></p><h3 id="License">License</h3><p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="Creative Commons License Logo"></a><br>This article is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a>.<br>Please contact me for commercial use.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NVM </tag>
            
            <tag> PMem </tag>
            
            <tag> 编程模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在github上发布packages</title>
      <link href="/2020/10/16/publish-packages-on-github/"/>
      <url>/2020/10/16/publish-packages-on-github/</url>
      
        <content type="html"><![CDATA[<p>第一次在github上发布一个package: <a href="https://github.com/lionelee/gitbook-plugin-codeline/packages/449533">gitbook-plugin-codeline</a>，也遇到一些问题，记录一下。</p><p>点击github仓库主页的package发布连接，提示按以下三个步骤操作:<br><img src="instructions.png" alt=""></p><p>在这里的第2步登录时，用户名为github的用户名，而密码则为github的personal access token，<br>需要在github的设置中Developer settings → Personal access token中创建一个，注意勾选以下三项:<br><img src="generate_token.png" alt=""><br>然后使用生成的token登录npm。</p><p>使用<code>npm publish</code>时可能会遇到下面的报错<br><img src="error_404.png" alt=""></p><p>需要将<code>package.json</code>的<code>name</code>修改为<code>@username/packagename</code>即可发布成功</p><h3 id="License">License</h3><p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="Creative Commons License Logo"></a><br>This article is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a>.<br>Please contact me for commercial use.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bonjour</title>
      <link href="/2020/10/05/Bonjour/"/>
      <url>/2020/10/05/Bonjour/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我留不住所有的岁月，岁月却留住我</p></blockquote><p>鸽了一年的 blog 网站终于又重拾起，套用了 Anatole 主题的模板，只因一些地方不甚欢喜，每欲改动却又拖延症犯起，几番纠结终于完成。</p><p>此番缘起也因为终于结束了23单身生活，另起人生新篇章。<br>To Min, love of my life.</p><p>今后的更新也随缘吧🤪</p><h3 id="License">License</h3><p><a href="http://creativecommons.org/licenses/by-nc-sa/4.0/"><img src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png" alt="Creative Commons License Logo"></a><br>This article is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">CC BY-NC-SA 4.0</a>.<br>Please contact me for commercial use.</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
